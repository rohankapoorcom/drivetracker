# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-03-14 15:19
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import Count


def merge_duplicate_hosts(apps, schema_editor):
    Host = apps.get_model('drives', 'Host')
    dupes = (Host.objects.values('name')
             .annotate(Count('id')).order_by()
             .filter(id__count__gt=1))
    qs = (Host.objects.filter(name__in=[item['name'] for item in dupes])
          .order_by('id'))

    if not qs:
        return

    selected = qs[0]
    for obj in qs.exclude(pk=selected.pk):
        if not obj.harddrive_set.all():
            obj.delete()
        else:
            for drive in obj.harddrive_set.all():
                drive.host = selected
                drive.save()
            obj.delete()


def merge_duplicate_manufacturers(apps, schema_editor):
    Manufacturer = apps.get_model('drives', 'Manufacturer')
    dupes = (Manufacturer.objects.values('name')
             .annotate(Count('id')).order_by()
             .filter(id__count__gt=1))
    qs = (Manufacturer.objects
          .filter(name__in=[item['name'] for item in dupes])
          .order_by('id'))

    if not qs:
        return

    selected = qs[0]
    for obj in qs.exclude(pk=selected.pk):
        if not obj.harddrive_set.all():
            obj.delete()
        else:
            for drive in obj.harddrive_set.all():
                drive.manufacturer = selected
                drive.save()
            obj.delete()


def merge_duplicate_models(apps, schema_editor):
    Model = apps.get_model('drives', 'Model')
    dupes = (Model.objects.values('name')
             .annotate(Count('id')).order_by()
             .filter(id__count__gt=1))
    qs = (Model.objects.filter(name__in=[item['name'] for item in dupes])
          .order_by('id'))

    if not qs:
        return

    selected = qs[0]
    for obj in qs.exclude(pk=selected.pk):
        if not obj.harddrive_set.all():
            obj.delete()
        else:
            for drive in obj.harddrive_set.all():
                drive.model = selected
                drive.save()
            obj.delete()


def merge_duplicates(apps, schema_editor):
    merge_duplicate_hosts(apps, schema_editor)
    merge_duplicate_manufacturers(apps, schema_editor)
    merge_duplicate_models(apps, schema_editor)


class Migration(migrations.Migration):

    dependencies = [
        ('drives', '0011_rename_foreign_keys_new_models'),
    ]

    operations = [
        migrations.RunPython(merge_duplicates,),
    ]
